task no 1:

#include<iostream>
using namespace std;
class counterType
{
	private:
		int counter;
		public:
			counterType()
			{
				counter=0;
			}
			void user()
			{   cout<<"\nEnter the Value of Counter ";
				cin>>counter;
			}
			void get()
			{
				cout<<"Counter = "<<counter;
			}
			void increment()
			{
				counter++;
			}
			void decrement()
			{  if(counter>0)
				{
					counter--;
				}
			}
};
int main()
{
counterType c;
counterType();
	c.get();
	c.user();
	c.increment();
	cout<<"After increment ";
	cout<<endl;
	c.get();
	c.decrement();
	cout<<endl<<"After decrement ";
	cout<<endl;
	c.get();
	return 0;
}

task no 2:

#include<iostream>
#include<string>
using namespace std;
class romanType 
{ public:
	string s;
	char array[10000];
	int num;
 public:
   romanType() 
   {
   	cout<<"constructor created \n";
	   }	
	 void store()
	 {  cout<<"Enter a Roman Numeral\n";
	 	cin>>s;
	 }
	 void numeral()
	 { int counter=0;
	 	int n=s.length();
	 	for( int i=0;i<n+1;i++)
	 	{
	 		array[i]=s[i];
	 		if(array[i]=='M')
	 		{
	 			counter+=1000;
			 }
			 if(array[i]=='D')
	 		{
	 			counter+=500;
			 }
			 if(array[i]=='C')
	 		{
	 			counter+=100;
			 }
			 if(array[i]=='L')
	 		{
	 			counter+=50;
			 }
			 if(array[i]=='X')
	 		{
	 			counter+=10;
			 }
			 if(array[i]=='V')
	 		{
	 			counter+=5;
			 }
			 if(array[i]=='I')
	 		{
	 			counter+=1;
			 }
		 }
		 num=counter-2;
		}
		void print()
		{  cout<<"Select the desired Opt\n";
			cout<<"1. To print given Num again in Roman \n";
			cout<<"2. To print given Num in Integer Form \n";
			int i=0;
			cin>>i;
			if(i==1)
			{
				cout<<"Roman Numeral is "<<s;
			}
			if(i==2)
			{
				cout<<"Positive Integer Num is "<<num;
			}
			if(i!=1 && i!=2)
			{
				cout<<"Please Enter a correct Opt\n";
				print();
			}
		}
};
int main()
{
	romanType r;
	r.store();
	r.numeral();
	r.print();
	return 0;
}

task no 3:

#include<iostream>
#include<string>
using namespace std;
void menu()
{
       cout <<"Enter 'Sun' for 'Sunday'"<< endl;
       cout <<"Enter 'Mon' for 'Monday'"<< endl;
       cout <<"Enter 'Tues' for 'Tuesday'"<< endl;
       cout <<"Enter 'Wednes' for 'Wednesday'"<< endl;
       cout <<"Enter 'Thurs' for 'Thursday'"<< endl;
       cout <<"Enter 'Fri' for 'Friday'"<< endl;
       cout <<"Enter 'Satur' for 'Saturday'"<< endl;
}

class dayType
{
       string days[7];
       int i;
       string day;
       string prDay;
       string NxtDay;
       string AddDays;
public:
       dayType(string i) :day(i){ 
       days[0] = "Mon";
       days[1] = "Tues";
       days[2] = "Wednes";
       days[3] = "Thurs";
       days[4] = "Fri";
       days[5] = "Satur";
       days[6] = "Sun";
}
       string setday(); 
       string preday();
       void Nextday();
       string add(int n); 
       void print(); 

};
int main()
{
       int n;

       string d;
        menu(); 
       cout <<"Enter the day :";
       getline(cin, d); 
       dayType Da(d); 
       Da.setday();
       Da.preday();
       Da.Nextday();

       cout <<"Enter the No. of days to add :";
       while (!(cin >> n) ||n<0) {
                     cin.clear();
                     cin.ignore(999, '\n');
                     cout <<"Invalid data type! \nPlease enter No. of daysto add again :";
             
       }
       Da.add(n);
       Da.print();
       system("pause");
       return 0;

}


string dayType::setday()
{ i=9;  
for(int j=0;j<7;j++)
{
       if (day == days[j])
       {
              i = j;
       }
  } if(i==9)
          {    day = "Invalid Input";
              i = 7;
       }
       return day;
}
string dayType::preday() 
{
       if (i == 0)
              prDay = days[6];
       else if (i == 7)
              prDay = "Invalid Input";
       else
              prDay = days[i - 1];
       return prDay;
}
void dayType::Nextday() 
{
       if (i == 6)
              NxtDay = days[0];
       else if (i == 7)
              prDay = "Invalid Input";
       else
              NxtDay = days[i + 1];

}
string dayType::add(int n) 
{
       n = n + i;
       while (n>= 7)
       {
              n = n - 7;
       }
       if (i == 7)
              days[n] = "Invalid Input ";
       return AddDays = days[n];
}
void dayType::print()
{
       cout << endl <<"\tDay="<< day <<"day"<< endl;
       cout <<"\tPrevious day :"<< prDay <<"day"<< endl;
       cout <<"\tNext day :"<< NxtDay <<"day"<< endl;
       cout <<"\tAfter Adding Days :"<< AddDays <<"day"<< endl;
}

task no 4:

